#!/usr/bin/env bash
set -euo pipefail

show_help() {
  cat <<'USAGE'
Usage: manage-cognito-admin.sh <command> [options]

Commands:
  list                              List users in the Cognito admin group
  create --email <email> [--username <name>] [--temp-password <pwd>] Create a new admin user
  set-password --username <name> --password <pwd> [--temporary]     Set/overwrite a user's password
  delete --username <name>          Delete a user from the pool
  help                              Show this help text

Environment resolution:
  Reads Cognito settings from (in order):
    1. Existing shell env vars (COGNITO_USER_POOL_ID, COGNITO_ADMIN_GROUP)
    2. ./.env.cognito (generated by deploy scripts)
    3. ./.env

AWS CLI prerequisites:
  - AWS CLI v2 installed and configured with credentials that can manage the pool
  - 'cognito-idp' permissions: admin-create-user, admin-delete-user, admin-set-user-password,
    admin-add-user-to-group, admin-list-groups-for-user, admin-add-user-to-group, list-users
USAGE
}

info() { printf '\033[1;34m[info]\033[0m %s\n' "$*"; }
warn() { printf '\033[1;33m[warn]\033[0m %s\n' "$*"; }
error() { printf '\033[1;31m[error]\033[0m %s\n' "$*" >&2; }

# Load env files if present and variables not already set
load_env_file() {
  local file=$1
  if [[ -f $file ]]; then
    while IFS='=' read -r key value; do
      [[ -z $key || $key =~ ^# ]] && continue
      if [[ -z ${!key:-} ]]; then
        export "$key"="${value}"
      fi
    done < <(grep -v '^#' "$file" | sed 's/\r$//')
  fi
}

load_envs() {
  load_env_file .env.cognito
  load_env_file .env
}

require_vars() {
  local missing=()
  for var in "$@"; do
    if [[ -z ${!var:-} ]]; then
      missing+=("$var")
    fi
  done
  if (( ${#missing[@]} )); then
    error "Missing required environment variables: ${missing[*]}"
    error "Populate them in .env.cognito or export in your shell."
    exit 1
  fi
}

ensure_cli() {
  if ! command -v aws >/dev/null 2>&1; then
    error "AWS CLI not found. Install AWS CLI v2 and configure credentials."
    exit 1
  fi
}

list_admin_users() {
  info "Listing Cognito admin users for pool $COGNITO_USER_POOL_ID (group: ${COGNITO_ADMIN_GROUP:-<none>})"
  local filter=""
  if [[ -n ${COGNITO_ADMIN_GROUP:-} ]]; then
    aws cognito-idp list-users-in-group \
      --user-pool-id "$COGNITO_USER_POOL_ID" \
      --group-name "$COGNITO_ADMIN_GROUP"
  else
    warn "COGNITO_ADMIN_GROUP not defined; listing entire pool instead"
    aws cognito-idp list-users --user-pool-id "$COGNITO_USER_POOL_ID"
  fi
}

create_admin_user() {
  local username=""
  local email=""
  local temp_password=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --email)
        email="$2"; shift 2;;
      --username)
        username="$2"; shift 2;;
      --temp-password)
        temp_password="$2"; shift 2;;
      *)
        error "Unknown option for create: $1"
        exit 1;;
    esac
  done

  if [[ -z $email ]]; then
    error "create requires --email"
    exit 1
  fi

  if [[ -z $username ]]; then
    username="$email"
    info "No --username provided; using email as username"
  fi

  info "Creating Cognito user '$username' in pool $COGNITO_USER_POOL_ID"
  aws cognito-idp admin-create-user \
    --user-pool-id "$COGNITO_USER_POOL_ID" \
    --username "$username" \
    --user-attributes Name=email,Value="$email" Name=email_verified,Value=true Name=preferred_username,Value="$email" \
    --message-action SUPPRESS

  if [[ -n ${COGNITO_ADMIN_GROUP:-} ]]; then
    info "Adding user '$username' to group $COGNITO_ADMIN_GROUP"
    aws cognito-idp admin-add-user-to-group \
      --user-pool-id "$COGNITO_USER_POOL_ID" \
      --username "$username" \
      --group-name "$COGNITO_ADMIN_GROUP"
  else
    warn "COGNITO_ADMIN_GROUP not defined; skipping group assignment"
  fi

  if [[ -n $temp_password ]]; then
    info "Setting temporary password for '$username'"
    aws cognito-idp admin-set-user-password \
      --user-pool-id "$COGNITO_USER_POOL_ID" \
      --username "$username" \
      --password "$temp_password" \
      --temporary
  else
    warn "No temporary password provided. Cognito will require password reset via invite email."
  fi
}

set_user_password() {
  local username=""
  local password=""
  local temporary=false

  while [[ $# -gt 0 ]]; do
    case "$1" in
      --username)
        username="$2"; shift 2;;
      --password)
        password="$2"; shift 2;;
      --temporary)
        temporary=true; shift;;
      *)
        error "Unknown option for set-password: $1"
        exit 1;;
    esac
  done

  if [[ -z $username || -z $password ]]; then
    error "set-password requires --username and --password"
    exit 1
  fi

  info "Updating password for '$username' (temporary=$temporary)"
  if $temporary; then
    aws cognito-idp admin-set-user-password \
      --user-pool-id "$COGNITO_USER_POOL_ID" \
      --username "$username" \
      --password "$password"
  else
    aws cognito-idp admin-set-user-password \
      --user-pool-id "$COGNITO_USER_POOL_ID" \
      --username "$username" \
      --password "$password" \
      --permanent
  fi
}

delete_user() {
  local username=""
  while [[ $# -gt 0 ]]; do
    case "$1" in
      --username)
        username="$2"; shift 2;;
      *)
        error "Unknown option for delete: $1"
        exit 1;;
    esac
  done

  if [[ -z $username ]]; then
    error "delete requires --username"
    exit 1
  fi

  read -r -p "Are you sure you want to delete user '$username'? [y/N] " confirmation
  if [[ ! $confirmation =~ ^[Yy]$ ]]; then
    info "Aborted deletion."
    exit 0
  fi

  info "Deleting user '$username' from pool $COGNITO_USER_POOL_ID"
  aws cognito-idp admin-delete-user \
    --user-pool-id "$COGNITO_USER_POOL_ID" \
    --username "$username"
}

main() {
  if [[ $# -lt 1 ]]; then
    show_help
    exit 1
  fi

  local command=$1
  shift || true

  load_envs
  require_vars COGNITO_USER_POOL_ID
  ensure_cli

  case "$command" in
    list)
      list_admin_users "$@";;
    create)
      create_admin_user "$@";;
    set-password)
      set_user_password "$@";;
    delete)
      delete_user "$@";;
    help|-h|--help)
      show_help;;
    *)
      error "Unknown command: $command"
      show_help
      exit 1;;
  esac
}

main "$@"
